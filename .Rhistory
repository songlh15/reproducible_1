demo()
clear
clear()
exit
quit
q()
c(0,1,2,3)+c(1,10)
x <- 1:10
if(x > 5) {
x <- 0
}
link <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
q1 <- download.file(link)
q1 <- download.file(destfile=link)
download.file(link,destfile=fss)
link <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(link,destfile="fss")
head(fss)
datain <- read.csv("fss.csv")
download.file(link,destfile="fss,csv")
datain <- read.csv("fss.csv")
datain <- read.csv(file="fss.csv")
download.file(link,"fss,csv")
datain <- read.csv("fss.csv",header=T)
download.file(link,"fss.csv")
datain <- read.csv("fss.csv",header=T)
head(datain)
names(datain)
acr10 <- datain[datain$acrACR=3 & datain$AGS=6,]
acr10 <- datain[datain$acrACR==3 & datain$AGS==6,]
acr10 <- datain[datain$ACR==3 & datain$AGS==6,]
which(arc10)
agricultureLogical <- datain[datain$ACR==3 & datain$AGS==6,]
which(agricultureLogical)
agricultureLogical <- datain[which(datain$ACR==3 & datain$AGS==6)]
agricultureLogical <- datain[which(datain$ACR==3 & datain$AGS==6),]
which(agricultureLogical)
agricultureLogical <- as.vector(datain[which(datain$ACR==3 & datain$AGS==6),])
which(agricultureLogical)
agricultureLogical <- datain$ACR==3 & datain$AGS==6
which(agricultureLogical)
library(jpeg)
install.packages("jpeg")
library(jpeg)
?readJPEG
jpg <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
jpeg <- readJPEG("jeff.jpg",native=T)
download.file(jpg,"jeff.jpg")
jpeg <- readJPEG("jeff.jpg",native=T)
quatile(jpeg,split=(30,80))
quatile(jpeg,probs=c(.30,.80))
quantile(jpeg,probs=c(.30,.80))
jpg <- "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(jpg,"jeff.jpg")
jeff <- readJPEG("jeff.jpg",native=T)
jpg <- "http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(jpg,"jeff.jpg")
jeff <- readJPEG("jeff.jpg",native=T)
quantile(jeff,probs=c(.30,.80))
quantile(jeff,probs=c(30,80)/100)
quantile(sort(jeff),probs=c(30,80)/100)
quantile(jeff,probs=c(30,80)/100,native=T)
quantile(jeff,probs=c(0.3,0.8),native=T)
quantile(jeff,probs=c(0.3,0.8),native=T,na.rm=T)
jeff
agricultureLogical <- datain$ACR==3 & datain$AGS==6
which(agricultureLogical)
install.packages("knitr")
weekave <- aggreage(steps~weekday,stepweekday,mean)
##Are there differences in activity patterns between weekdays and weekends?
weekave <- aggregage(steps~interval,stepweekday[weekday=='weekday'],mean)
aggregage
##Are there differences in activity patterns between weekdays and weekends?
weekave <- aggregate(steps~interval,stepweekday[weekday=='weekday'],mean)
stepweekday
# check work directory
if(!getwd()=="C:/Users/song/Dropbox/Coursera/reproduce")
setwd("C:/Users/song/Dropbox/Coursera/reproduce")
#read data in
datains <- read.csv('activity.csv',na='NA')
#convert interval to time format
timeday <- strptime(sprintf("%04d", as.numeric(as.character(datains$interval))), "%H%M")
timedayf <- data.frame(timeday)
#remove added date part
timedayf <- gsub('2014-07-18','',timedayf$timeday)
#add in time to data frame
datetime<- cbind(datains,timedayf)
#convert datetime to date format
comb <- data.frame(daytime=paste(as.character(datetime$date),as.character(datetime$timedayf)))
comb$daytime <- as.POSIXlt(as.character(comb$daytime))
#combine steps information with converted datetime
steptime <- cbind(datetime,comb)
#check weekend and weekday
week <- data.frame(weekname=weekdays(steptime$daytime))
weekd <- cbind(steptime,week)
#create weekend and weekday
stepweek <-data.frame(weekday=ifelse(weekd$weekname %in% c('Saturday','Sunday'),'weekend','weekday'))
#create analytic data with steps,date, time, weekday
stepweekday<- cbind(weekd,stepweek)
#show partial data
head(stepweekday[1:5,c('steps','daytime','weekday')])
##start analysis
#1, remove NA for steps
stepdatetime <- stepweekday[!is.na(stepweekday$steps),]
nastep <-  stepweekday[is.na(stepweekday$steps),]
stepweekday$steps <- as.numeric(stepweekday$steps)
#datef <- as.Date(strptime(steptime$daytime,format="%Y-%m-%d %H:%M:%s"))
#get total steps by date
#sum_int <- aggregate(datain$steps,by=list(datain$date),FUN=sum)
sum_in <- aggregate(steps~date,stepweekday,sum)
#get mean steps for each interval
mean_int <- aggregate(steps~interval,stepweekday,mean)
#time series
plot(mean_int$interval,mean_int$steps,type='l',main='Average steps taken each 5-minite interval',xlab='intervals',ylab='Steps taken')
#histgram
hist(sum_in$steps)
library(ggplot2)
ggplot(sum_in, aes(x=steps)) + geom_histogram(binwidth=400)
#mean of steps
mean(sum_in$steps)
#median of steps
median(sum_in$steps)
#time series
plot(stepweekday$daytime,stepweekday$steps,type='l',xlab='days',ylab='Steps taken')
mean_in <- aggregate(steps~date,stepweekday,mean)
median_in <- aggregate(steps~date,stepweekday,median)
#impute NA by merge in mean steps of that day
impute <- merge(stepweekday[,c('steps','date','interval','daytime')],mean_int,by.x='interval',by.y='interval',all=T)
impute$steps.x <- ifelse(is.na(impute$steps.x),impute$steps.y,impute$steps.x)
#rename steps.x to steps
colnames(impute)[2] <- "steps"
#sort data
imputedata <- impute[with(impute, order(date,interval)),c('steps','date','interval')]
#get total steps per day using imputed data
sumimpute <- aggregate(steps~date,imputedata,sum)
library(ggplot2)
#redo histogram after filled in NA values
ggplot(sumimpute, aes(x=steps)) + geom_histogram(binwidth=400)
mean(sumimpute$steps)
median(sumimpute$steps)
median_in <- aggregate(steps~date,stepweekday,median)
##Are there differences in activity patterns between weekdays and weekends?
weekave <- aggregate(steps~interval,stepweekday[weekday=='weekday',],mean)
View(stepweekday)
##Are there differences in activity patterns between weekdays and weekends?
weekave <- aggregate(steps~interval,stepweekday[stepweekday$weekday=='weekday',],mean)
View(weekave)
weekendave <- aggregate(steps~interval,stepweekday[stepweekday$weekday=='weekend',],mean)
View(weekd)
View(weekave)
par(mrow=c(2,1))
plot(weekave$interval,weekave$steps)
plot(weekendave$interval,weekendave$steps)
plot(weekave$interval,weekave$steps,type='1')
plot(weekendave$interval,weekendave$steps,type='1')
par(mrow=c(2,1))
plot(weekave$interval,weekave$steps,type='l')
plot(weekendave$interval,weekendave$steps,type='l')
#panel plots
par(mfrow=c(2,1))
plot(weekave$interval,weekave$steps,type='l')
plot(weekendave$interval,weekendave$steps,type='l')
par(mfrow=c(2,1))
plot(weekave$interval,weekave$steps,type='l',xlab='Weekday',ylab='Average steps')
plot(weekendave$interval,weekendave$steps,type='l',xlab='Weekday',ylab='Average steps')
View(steptime)
View(steptime)
#convert datetime to date format
comb <- data.frame(daytime=paste(as.character(datetime$date),as.character(datetime$timedayf)))
View(comb)
#convert interval to time format
timeday <- strptime(sprintf("%04d", as.numeric(as.character(datains$interval))), "%H%M")
timedayf <- data.frame(timeday)
#remove added date part
timedayf <- gsub('2014-07-19','',timedayf$timeday)
#add in time to data frame
datetime<- cbind(datains,timedayf)
#convert datetime to date format
comb <- data.frame(daytime=paste(as.character(datetime$date),as.character(datetime$timedayf)))
comb$daytime <- as.POSIXlt(as.character(comb$daytime))
#combine steps information with converted datetime
steptime <- cbind(datetime,comb)
View(steptime)
stepdatetime <- steptime[!is.na(steptime$steps),]
nastep <-  steptime[is.na(steptime$steps),]
stepdatetime$steps <- as.numeric(stepdatetime$steps)
View(stepdatetime)
nastep <-  steptime[is.na(steptime$steps),]
View(nastep)
#sum_int <- aggregate(datain$steps,by=list(datain$date),FUN=sum)
sum_in <- aggregate(steps~date,stepdatetime,sum)
#get mean steps for each interval
mean_int <- aggregate(steps~interval,stepdatetime,mean)
#time series
plot(mean_int$interval,mean_int$steps,type='l',main='Average steps taken each 5-minite interval',xlab='intervals',ylab='Steps taken')
#histgram
hist(sum_in$steps)
library(ggplot2)
ggplot(sum_in, aes(x=steps)) + geom_histogram(binwidth=400)
##start analysis
#1, remove NA for steps
stepdatetime <- steptime[!is.na(steptime$steps),]
nastep <-  steptime[is.na(steptime$steps),]
stepdatetime$steps <- as.numeric(stepdatetime$steps)
#datef <- as.Date(strptime(steptime$daytime,format="%Y-%m-%d %H:%M:%s"))
#get total steps by date
#sum_int <- aggregate(datain$steps,by=list(datain$date),FUN=sum)
sum_in <- aggregate(steps~date,stepdatetime,sum)
#get mean steps for each interval
mean_int <- aggregate(steps~interval,stepdatetime,mean)
#time series
plot(mean_int$interval,mean_int$steps,type='l',main='Average steps taken each 5-minite interval',xlab='intervals',ylab='Steps taken')
#histgram
hist(sum_in$steps)
library(ggplot2)
ggplot(sum_in, aes(x=steps)) + geom_histogram(binwidth=400)
#mean of steps
mean(sum_in$steps)
#median of steps
median(sum_in$steps)
#time series
plot(stepdatetime$daytime,stepdatetime$steps,type='l',xlab='days',ylab='Steps taken')
mean_in <- aggregate(steps~date,stepdatetime,mean)
median_in <- aggregate(steps~date,stepdatetime,median)
#impute NA by merge in mean steps of that day
impute <- merge(steptime[,c('steps','date','interval','daytime')],mean_int,by.x='interval',by.y='interval',all=T)
impute$steps.x <- ifelse(is.na(impute$steps.x),impute$steps.y,impute$steps.x)
#rename steps.x to steps
colnames(impute)[2] <- "steps"
#sort data
imputedata <- impute[with(impute, order(date,interval)),c('steps','date','interval')]
#get total steps per day using imputed data
sumimpute <- aggregate(steps~date,imputedata,sum)
library(ggplot2)
#redo histogram after filled in NA values
ggplot(sumimpute, aes(x=steps)) + geom_histogram(binwidth=400)
mean(sumimpute$steps)
median(sumimpute$steps)
mean_in <- aggregate(steps~date,stepdatetime,mean)
median_in <- aggregate(steps~date,stepdatetime,median)
#mean of steps
mean(sum_in$steps)
#median of steps
median(sum_in$steps)
week <- data.frame(weekname=weekdays(inputedata$daytime))
weekd <- cbind(steptime,week)
week <- data.frame(weekname=weekdays(imputedata$daytime))
weekd <- cbind(steptime,week)
View(imputedata)
#impute NA by merge in mean steps of that day
impute <- merge(steptime[,c('steps','date','interval','daytime')],mean_int,by.x='interval',by.y='interval',all=T)
impute$steps.x <- ifelse(is.na(impute$steps.x),impute$steps.y,impute$steps.x)
#rename steps.x to steps
colnames(impute)[2] <- "steps"
#sort data
imputedata <- impute[with(impute, order(date,interval)),c('steps','date','interval')]
View(imputedata)
week <- data.frame(weekname=weekdays(imputedata$date))
weekd <- cbind(steptime,week)
View(impute)
#sort data
imputedata <- impute[with(impute, order(date,interval)),c('steps','date','interval','daytime')]
View(imputedata)
week <- data.frame(weekname=weekdays(imputedata$daytime))
weekd <- cbind(steptime,week)
View(weekd)
#create weekend and weekday
stepweek <-data.frame(weekday=ifelse(weekd$weekname %in% c('Saturday','Sunday'),'weekend','weekday'))
#create analytic data with steps,date, time, weekday
stepweekday<- cbind(weekd,stepweek)
View(stepweekday)
head(steptime[1:5,])
head(steptime[1:5,c('steps','date','interval','daytime')])
sum_interval <- aggregate(steps~interval,stepdatetime,sum)
View(sum_interval)
View(sum_interval)
sum_interval <- aggregate(steps~interval,stepdatetime,sum)
#sort descending to get the max steps
sum_interval[with(sum_interval, order(-steps)),]
#output the first row as max steps taken
sum_interval[1,c('interval','steps')]
sum_interval <- aggregate(steps~interval,stepdatetime,sum)
#sort descending to get the max steps
sum_interval[with(sum_interval, order(-steps)),]
#output the first row as max steps taken
sum_interval[1,c('interval','steps')]
View(sum_interval)
sum_interval <- aggregate(steps~interval,stepdatetime,sum)
#sort descending to get the max steps
sum_interval[with(sum_interval, order(-steps)),]
#output the first row as max steps taken
head(sum_interval,1)
sum_interval <- aggregate(steps~interval,stepdatetime,sum)
#sort descending to get the max stepsinter
interval_max <- sum_interval[with(sum_interval, order(-steps)),]
#output the first row as max steps taken
head(interval_max ,1)
#sort descending to get the max stepsinter
interval_max <- mean_int[with(mean_int, order(-steps)),]
View(interval_max)
length(steptime[is.na(steptime$steps),])
nastep <-  steptime[is.na(steptime$steps),]
length(nastep)
```{r task3}
nrow(steptime[is.na(steptime$steps),])
```
nastep <-steptime[is.na(steptime$steps),]
nrow(nastep)
View(imputedata)
#combine steps information with converted datetime
steptime <- cbind(datetime,comb)
par(mfrow=c(2,1))
plot(weekave$interval,weekave$steps,type='l',xlab='Weekday',ylab='Average steps')
plot(weekendave$interval,weekendave$steps,type='l',xlab='Weekday',ylab='Average steps')
#redo histogram after filled in NA values
library(ggplot2)
ggplot(sumimpute, aes(x=steps)) + geom_histogram(binwidth=400)
#output mean and median of steps taken after imputation
mean(sumimpute$steps)
median(sumimpute$steps)
#get mean steps for each interval
mean_int <- aggregate(steps~interval,stepdatetime,mean)
#time series plot
plot(mean_int$interval,mean_int$steps,type='l',main='Average steps taken each 5-minite interval',xlab='5-minute intervals',ylab='Average steps taken')
#sort steps in descending to get the max stepsinter
interval_max <- mean_int[with(mean_int, order(-steps)),]
#output the first row to the interval which max average steps taken
head(interval_max ,1)
#1, remove NA for steps
stepdatetime <- steptime[!is.na(steptime$steps),]
stepdatetime$steps <- as.numeric(stepdatetime$steps)
#get total steps by date
sum_in <- aggregate(steps~date,stepdatetime,sum)
#plot histogram
library(ggplot2)
ggplot(sum_in, aes(x=steps)) + geom_histogram(binwidth=400)
#mean of steps
mean(sum_in$steps)
#median of steps
median(sum_in$steps)
```
##What is the average daily activity pattern?
This task requires calculate the average steps of the 5-minute interval across all days, plot the time series graph and figure out the interval in which the maxium number of steps was taken.
The results can be seen here:
```{r task2}
#get mean steps for each interval
mean_int <- aggregate(steps~interval,stepdatetime,mean)
#time series plot
plot(mean_int$interval,mean_int$steps,type='l',main='Average steps taken each 5-minite interval',xlab='5-minute intervals',ylab='Average steps taken')
#sort steps in descending to get the max stepsinter
interval_max <- mean_int[with(mean_int, order(-steps)),]
#output the first row to the interval which max average steps taken
head(interval_max ,1)
nastep <-steptime[is.na(steptime$steps),]
nrow(nastep)
#impute NA by merge in mean steps of that day
impute <- merge(steptime[,c('steps','date','interval','daytime')],mean_int,by.x='interval',by.y='interval',all=T)
impute$steps.x <- ifelse(is.na(impute$steps.x),impute$steps.y,impute$steps.x)
#rename steps.x to steps
colnames(impute)[2] <- "steps"
#sort data
imputedata <- impute[with(impute, order(date,interval)),c('steps','date','interval','daytime')]
# first 5 rows of data before  imputing.
head(steptime,5)
# first 5 rows of data after  imputing.
head(imputedata)
#get total steps per day using imputed data
sumimpute <- aggregate(steps~date,imputedata,sum)
#redo histogram after filled in NA values
library(ggplot2)
ggplot(sumimpute, aes(x=steps)) + geom_histogram(binwidth=400)
#output mean and median of steps taken after imputation
mean(sumimpute$steps)
median(sumimpute$steps)
#check weekend and weekday
week <- data.frame(weekname=weekdays(imputedata$daytime))
weekd <- cbind(steptime,week)
#create weekend and weekday
stepweek <-data.frame(weekday=ifelse(weekd$weekname %in% c('Saturday','Sunday'),'weekend','weekday'))
#create analytic data with steps,date, time, weekday
stepweekday<- cbind(weekd,stepweek)
#show partial data
head(stepweekday[1:5,c('steps','daytime','weekday')])
#calculate mean steps taken by interval during weekday
weekave <- aggregate(steps~interval,stepweekday[stepweekday$weekday=='weekday',],mean)
#calculate mean steps taken by interval during weekend
weekendave <- aggregate(steps~interval,stepweekday[stepweekday$weekday=='weekend',],mean)
#panel plots using basic R
par(mfrow=c(2,1))
plot(weekave$interval,weekave$steps,type='l',xlab='Weekday',ylab='Average steps')
plot(weekendave$interval,weekendave$steps,type='l',xlab='Weekday',ylab='Average steps')
sessioninfo()
sessionInfo()
View(comb)
